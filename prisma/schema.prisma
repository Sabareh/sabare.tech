// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(EDITOR)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  contents      Content[]
  activities    Activity[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Content {
  id          String        @id @default(cuid())
  title       String
  slug        String        @unique
  description String?
  content     String
  type        ContentType
  status      ContentStatus @default(DRAFT)
  featured    Boolean       @default(false)
  metadata    Json?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  publishedAt DateTime?
  authorId    String
  author      User          @relation(fields: [authorId], references: [id])
  categoryId  String?
  category    Category?     @relation(fields: [categoryId], references: [id])
  tags        Tag[]
  media       Media[]
  versions    Version[]
  activities  Activity[]

  @@index([type])
  @@index([status])
  @@index([authorId])
  @@index([categoryId])
}

model Version {
  id        String   @id @default(cuid())
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId String
  data      Json
  createdAt DateTime @default(now())
  note      String?

  @@index([contentId])
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  contents    Content[]
  parentId    String?
  parent      Category? @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory")

  @@index([parentId])
}

model Tag {
  id       String    @id @default(cuid())
  name     String    @unique
  slug     String    @unique
  contents Content[]
}

model Media {
  id        String   @id @default(cuid())
  name      String
  url       String
  type      MediaType
  size      Int
  width     Int?
  height    Int?
  alt       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  contentId String?
  content   Content? @relation(fields: [contentId], references: [id])

  @@index([contentId])
}

model Activity {
  id        String       @id @default(cuid())
  action    ActivityType
  details   String?
  createdAt DateTime     @default(now())
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  contentId String?
  content   Content?     @relation(fields: [contentId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([contentId])
}

enum Role {
  ADMIN
  EDITOR
  AUTHOR
  VIEWER
}

enum ContentType {
  BLOG
  PROJECT
  EXPERIENCE
  TESTIMONIAL
  PAGE
  CONFIG
}

enum ContentStatus {
  DRAFT
  REVIEW
  SCHEDULED
  PUBLISHED
  ARCHIVED
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
  AUDIO
}

enum ActivityType {
  CREATE
  UPDATE
  DELETE
  PUBLISH
  ARCHIVE
  RESTORE
  LOGIN
  LOGOUT
}
